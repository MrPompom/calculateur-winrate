import axios from 'axios';

const API_URL = import.meta.env.VITE_API_URL;

// üèÜ Ajouter un joueur
export const addPlayer = async (name) => {
  try {
    const response = await axios.post(`${API_URL}/players`, { name });
    return response.data;
  } catch (error) {
    console.error("‚ùå Erreur lors de l'ajout du joueur:", error);
    throw error;
  }
};

// üéÆ Ajouter une game
export const addGame = async ({ players, winningTeam }) => {
  try {
    const response = await axios.post(`${API_URL}/games`, { players, winningTeam });
    return response.data;
  } catch (error) {
    console.error("‚ùå Erreur lors de l'ajout de la game:", error);
    throw error;
  }
};

// üìä R√©cup√©rer les stats d'un joueur sp√©cifique
export const getPlayerStats = async (playerName) => {
  try {
    const response = await axios.get(`${API_URL}/players/${playerName}/stats`);
    return response.data;
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des stats du joueur:", error);
    throw error;
  }
};

// üìã R√©cup√©rer tous les joueurs
export const getAllPlayers = async () => {
  try {
    const response = await axios.get(`${API_URL}/players`);
    return response.data;
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration de la liste des joueurs:", error);
    throw error;
  }
};

// üéÆ R√©cup√©rer toutes les games
export const getAllGames = async () => {
  try {
    const response = await axios.get(`${API_URL}/games`);
    return response.data;
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des games:", error);
    throw error;
  }
};

// ‚öñÔ∏è Cr√©er des √©quipes √©quilibr√©es ou al√©atoires
export const createTeams = async (players, assignLanes, balanceTeams) => {
  try {
    const response = await axios.post(`${API_URL}/teams/create`, {  // Changement de route pour √™tre plus coh√©rent
      players,  
      assignLanes,
      balanceTeams
    });
    return response.data;
  } catch (error) {
    console.error("‚ùå Erreur lors de la cr√©ation des √©quipes:", error);
    return null;
  }
};

// üîÑ Recalculer les statistiques des joueurs
export const recalculateStats = async () => {
  try {
    const response = await axios.post(`${API_URL}/players/recalculate`);
    return response.data;
  } catch (error) {
    console.error("‚ùå Erreur lors du recalcul des stats:", error);
    throw error;
  }
};
